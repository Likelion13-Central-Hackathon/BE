name: CI with Gradle

# develop, main 브랜치에 PR이 생성될 때 CI 파이프라인 실행
on:
  pull_request:
    branches: [ "develop", "main" ]
  push:
    branches: [ "main", "develop" ]

# 전역 환경변수
env:
  JAVA_VERSION: '17' # 사용할 JDK 버전(프로젝트에 맞게 조정)
  IMAGE: ${{ secrets.DOCKER_USERNAME }}/be

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    env:
      # DB (in-memory H2)
      SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
      SPRING_DATASOURCE_USERNAME: sa
      SPRING_DATASOURCE_PASSWORD:
      # JPA
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      # 외부 키(필요 시)
      OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
      OPENAI_TIMEOUT: ${{ secrets.OPENAI_TIMEOUT }}
      PPLX_KEY: ${{ secrets.PPLX_KEY }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Tests
        run: ./gradlew clean test -Dspring.profiles.active=test --info --stacktrace

      - name: Upload Test Report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test

  build:
    name: Build JAR
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew bootJar -x test --no-daemon

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

  docker-push:
    name: Docker Build & Push
    # PR이 아닐 때만 + main 브랜치만 푸시
    if: github.event_name != 'pull_request' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download JAR artifact  # build에서 만든 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}
